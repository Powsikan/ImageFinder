{"version":3,"sources":["components/navbar/NavBar.js","components/image-result/ImageResult.js","components/search/Search.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","title","ImageResult","state","open","currentImg","handleOpen","img","setState","handleClose","imageListContent","images","this","props","cols","map","tags","key","id","subtitle","user","actionIcon","onClick","largeImageURL","color","src","alt","actions","label","primary","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","value","axios","get","then","res","data","hits","catch","err","console","log","onAmountChange","index","name","floatingLabelText","onChange","fullWidth","primaryText","length","Footer","className","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.853199a8.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from 'material-ui/AppBar'\n\nconst NavBar = () => <AppBar title=\"Image Finder\"/>;\n\nexport default NavBar\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {GridList, GridTile, IconButton, Dialog, FlatButton} from \"material-ui\";\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in'\n\n\nclass ImageResult extends Component {\n    state = {\n        open: false,\n        currentImg: ''\n    }\n\n    handleOpen = img => {\n        this.setState({open: true, currentImg: img})\n    }\n\n    handleClose = () => {\n        this.setState({open: false})\n    }\n\n    render() {\n        let imageListContent;\n        const {images} = this.props;\n\n        if (images) {\n            imageListContent = (\n                <GridList cols={3}>\n                    {images.map(img => (\n                        <GridTile\n                            title={img.tags}\n                            key={img.id}\n                            subtitle={<span>by <strong>{img.user}</strong></span>}\n                            actionIcon={<IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\n                                <ZoomIn color=\"white\"/>\n                            </IconButton>}\n                        >\n                            <img src={img.largeImageURL} alt=\"\"/>\n                        </GridTile>\n                    ))}\n                </GridList>\n            )\n        } else {\n            imageListContent = null;\n        }\n\n        const actions = [<FlatButton label=\"Close\" primary={true} onClick={this.handleClose}/>]\n        return (\n            <div>\n                {imageListContent}\n                <Dialog\n                    actions={actions}\n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={this.handleClose}\n                >\n                    <img src={this.state.currentImg} alt=\"\" style={{width: '100%'}}/>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nImageResult.propTypes = {\n    images: PropTypes.array.isRequired\n}\nexport default ImageResult;\n","import React, {Component} from 'react';\nimport {TextField, SelectField, MenuItem} from 'material-ui';\nimport axios from 'axios';\nimport ImageResult from \"../image-result/ImageResult\";\n\nclass Search extends Component {\n    state = {\n        searchText: '',\n        amount: 15,\n        apiUrl: 'https://pixabay.com/api',\n        apiKey: '16671798-01f55fad2301ad3f652388cef',\n        images: []\n    };\n\n    onTextChange = (e, value) => {\n        this.setState({searchText: value}, () => {\n            if (value===''){\n                this.setState({images:[]});\n            }else {\n            axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n                .then(res => this.setState({images: res.data.hits}))\n                .catch(err => console.log(err));\n            }\n        });\n    };\n\n    onAmountChange = (e, index, value) => {\n        this.setState({amount: value});\n    }\n\n    render() {\n        console.log(this.state.images);\n        return (\n            <div>\n                <TextField\n                    name=\"SearchText\"\n                    floatingLabelText=\"Search For Images\"\n                    value={this.state.searchText}\n                    onChange={this.onTextChange}\n                    fullWidth={true}\n                />\n                <br/>\n                <SelectField\n                    name=\"amount\"\n                    floatingLabelText=\"Amount\"\n                    value={this.state.amount}\n                    onChange={this.onAmountChange}\n                >\n                    <MenuItem value={5} primaryText=\"5\"/>\n                    <MenuItem value={10} primaryText=\"10\"/>\n                    <MenuItem value={15} primaryText=\"15\"/>\n                    <MenuItem value={20} primaryText=\"20\"/>\n                    <MenuItem value={30} primaryText=\"30\"/>\n                    <MenuItem value={50} primaryText=\"50\"/>\n\n                </SelectField>\n                <br/>\n                {this.state.images.length > 0 ? (<ImageResult images={this.state.images}/>) : null}\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"footer\">\n               <h4 >Developed by <a href=\"www.github.com/powsikan\"><strong> K.POWSIKAN </strong></a></h4>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React from \"react\";\nimport NavBar from \"./components/navbar/NavBar\";\nimport Search from \"./components/search/Search\";\nimport \"./App.css\";\nimport { MuiThemeProvider } from \"material-ui/styles\";\nimport Footer from \"./components/footer/Footer\";\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n      <div>\n      <NavBar />\n      <Search />\n      <Footer/>\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}